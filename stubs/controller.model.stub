<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Database\Eloquent\Collection;
use Maatwebsite\Excel\Facades\Excel;
use App\Services\Operate\ListColumnService;
use {{ namespacedModel }};

class {{ class }} extends Controller
{
    public function __construct(
        protected Request $request,        
        protected {{ model }} $oModel,
    ) {
    }

    // 列表頁
    public function listHTML(ListColumnService $listColumnService)
    {
        $user = auth('operate')->user();
        // table設定，可用欄位
        $TableSetting = $listColumnService->getTableSetting($this->oModel);
        // 使用者設定
        $userColumns = $listColumnService->getWithUserId($this->oModel, $user->id);
        //根據使用者設定修改順序
        $TableSetting["canUseColumn"] = collect($TableSetting["canUseColumn"])->sortBy(function ($item, $key) use ($userColumns) {
            return array_search($item, $userColumns);
        })->toArray();
        //
        $pageLimit = $this->request->get('pageLimit') ?: 10; //預設10
        //過濾條件
        $Paginator = $this->oModel->filter($this->request->all())->with("audits")->paginate($pageLimit);
        
        // @todo 
        return view('operate/pages/{{r_blade_folder}}/list', [
            'paginator' => $Paginator,            
            'model' => $this->oModel,
            'columns' => $userColumns,
            'tableSetting' => $TableSetting,
        ]);
    }

    // 新增、修改頁面
    public function updateHTML($id)
    {
        $user = auth('operate')->user();

        if ($id) {
            //修改
            $Data = $this->oModel->findOrFail($id);
        } else {
            $Data = $this->oModel;
            //新增預設值
            $Data->id = 0;
            // $Data->name = '';
            // $Data->status = 'Y';
        }
        //輸入驗證遭擋，會有舊資料，優先使用舊資料
        foreach ((array) $this->request->old() as $key => $value) {
            if (!$value) {
                continue;
            }
            $Data->$key = $value;
        }

        //View
        return view('operate/pages/{{r_blade_folder}}/update', [
            'data' => $Data,                        
            'model' => $this->oModel,
        ]);
    }

    // 新增、修改
    public function update($id)
    {
        $user = auth('operate')->user();

        //過濾
        // $UpdateData = $this->request->only([
        //    'name', 'status'
        // ]);
        $UpdateData = $this->request->toArray();

        //驗證資料
        $validator = Validator::make(
            $UpdateData,
            $this->oModel->getValidatorRules(),
            $this->oModel->getValidatorMessage(),
        );

        //驗證有誤
        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }
        if ($id) {
            $this->oModel->find($id)->update($UpdateData);
        } else {
            $id = $this->oModel->create($UpdateData)->id;
        }
        
        return redirect("/operate/{{r_url}}?" . $this->request->getQueryString())->with(['success' => __('送出成功')]);
    }

    //批次刪除
    public function delBatch()
    {
        //刪除
        foreach ((array) $this->request->post('id_array') as $id) {
            $this->oModel->find($id)->delete();
        }

        return redirect("/operate/{{r_url}}?" . $this->request->getQueryString())->with(['success' => __('刪除成功')]);
    }

    //批次修改排序
    public function sortBatch()
    {
        $ID_Array = $this->request->post('sort');
    }

    //匯入
    public function import()
    {
        //使用工具只為了轉成 Collection 三維陣列 sheet > row > column
        $subjects = Excel::toCollection(null, $this->request->file('file')->store('temp'));
        //開始逐筆匯入
        try {
            $AllMessage = $this->oModel->importData($subjects->toArray());
        } catch (\Exception $e) {
            return redirect("/operate/{{r_url}}?" . $this->request->getQueryString())->with(['error' => $e->getMessage()]);
        }
        //有錯誤
        if ($AllMessage) {
            return redirect()->back()->withErrors(['message' => implode(',', $AllMessage)]);
        }
        //
        return redirect("/operate/{{r_url}}?" . $this->request->getQueryString())->with(['success' => __('送出成功')]);
    }

    //匯出
    public function export($Type)
    {
        //匯出的內文是否使用變異器
        $useMutator = false;
        if ($Type == "value") {
            $useMutator = true;
        }
        $ExportList = $this->oModel->filter($this->request->all())->export($useMutator);

        //匯出
        return (new Collection($ExportList))->downloadExcel('{{r_url}}_data_' . time() . '.xlsx');
    }
  
    public function saveListColumn(ListColumnService $listColumnService)
    {
        $list = $this->request->get('list', []);
        $user = auth('operate')->user();
        $listColumnService->renewListColumn($this->oModel, $list, $user->id);
        return back();
    }

}
